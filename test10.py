# Создайте словарь, где ключами и значениями будут числа от 1 до 9. Затем, с помощью этого словаря отобразите на экране таблицу умножения. 
# Для создания словаря, воспользуйтесь генератором.


dictionary = {i : i for i in range(1, 10)}
print("Созданный гшенератором словарь: ")
print(dictionary)
print()
print("Таблица умножения, отображенная не экране \n создана с помощью этого словаря")
for key in dictionary:
    for i in range(1, 10):
        print((str(dictionary[key] * i)).rjust(2), end=' ')
    print()


    # Требуется создать словарь, который в качестве ключей будет принимать данные числа
    # (т. е. ключи будут типом int), а в качестве значений – количество этих чисел в имеющейся последовательности.
    # Для построения словаря создайте функцию count_it(sequence), принимающую строку из цифр. Функция должна возвратить
    # словарь из 3-х самых часто встречаемых чисел.
print("ВТОРОЕ ЗАДАНИЕ")
def count_it(sequence):
    # При помощи генератора создаем словарь, где ключом выступает уникальный элемент строки, а значением - его частота (вычисляется методом count()) 	
    num_frequency = {int(item): sequence.count(item) for item in sequence}

    # Сортируем словарь по значениям в порядке возрастания. Для этого методом items() формируем пары “(ключ, значение)”
    # в виде кортежей по всем элементам словаря. Т. к. нужно сортировать по значениям, берем второй элемент кортежей. В результате получим список из кортежей “(ключ, значение)”
    sorted_num_frequency = sorted(num_frequency.items(), key=lambda element: element[1])

    # Возвращаем последние 3 элемента списка, т. е. кортежи с самыми большими значениями второй компоненты, которые преобразовываем в словарь 
    return dict(sorted_num_frequency[-3:])

# Тесты
print(count_it('1111111111222'))
print(count_it('123456789012133288776655353535353441111'))
print(count_it('007767757744331166554444'))